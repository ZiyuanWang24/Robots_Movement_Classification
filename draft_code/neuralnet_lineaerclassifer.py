# -*- coding: utf-8 -*-
"""Wall following robot_NeuralNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UMptV_pU4wdGUS5xP4rbjSvNRQ6o458L
"""

from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score

from sklearn import linear_model
from sklearn import metrics
from sklearn.metrics import confusion_matrix

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

Models = []
Accuracy_Trian = []
Accuracy_Test = []

df = pd.read_csv("sensor_readings_24.csv", header = None)

# Select random part as train and test sets
msk = np.random.rand(len(df)) < 0.8
dfTrain = df[msk]
dfTest = df[~msk]

# Convert to numpy arrays for scikit learn
dataTrain = np.array(dfTrain)
dataTest = np.array(dfTest)

# Divide in X and Y
XTrain = dataTrain[:,0:dataTrain.shape[1]-1]
YTrain = dataTrain[:,dataTrain.shape[1]-1]

XTest = dataTest[:,0:dataTrain.shape[1]-1]
YTest = dataTest[:,dataTrain.shape[1]-1]

model = "NeuralNet"
Models.append(model)
clf = MLPClassifier()

clf.fit(XTrain, YTrain)        
YPred = clf.predict(XTest)
YPredTrain = clf.predict(XTrain)
trainAccuracy = accuracy_score(YTest, YPred, normalize = True)
testAccuracy = accuracy_score(YTrain, YPredTrain, normalize = True)
print("Model: " + str(model))
print("Train accuracy: "  + str(trainAccuracy))
print("Test accuracy: "  + str(testAccuracy))

Accuracy_Trian.append(trainAccuracy)
Accuracy_Test.append(testAccuracy)
#plt.clf()
#handles = plt.plot(np.column_stack((YTest, YPred)))
#plt.legend(handles, ['True direction', 'Predicted'])
#plt.title(model)

cm = confusion_matrix(YTest,YPred)
plt.rcParams.update({'font.size': 26})

f, ax = plt.subplots(figsize =(10,10)) 
sns.heatmap(cm,cmap = "crest", annot = True,linewidths=0.5 ,linecolor ="green",fmt =".0f",ax=ax)
ax.set_title("The confusion matrix of NeuralNet Classifer")
plt.show()

df_linear = pd.read_csv("sensor_readings_24.csv")

df_linear = df_linear.replace('Move-Forward',0)
df_linear = df_linear.replace('Slight-Right-Turn',1)
df_linear = df_linear.replace('Sharp-Right-Turn',2)
df_linear = df_linear.replace('Slight-Left-Turn',3)

data_linear = pd.DataFrame(df_linear)
data_linear.head()

data_linear = df_linear.values
x = int(0.7*data_linear.shape[0])
y = data_linear[0:x,24]

x_train = data_linear[0:x,0:24]
x_test = data_linear[x:data_linear.shape[0],0:24]

y_train = y.astype(int)
y_test = data_linear[x:data_linear.shape[0],24].astype(int)

model2 = linear_model.LogisticRegression(penalty ='l2',max_iter=500,multi_class= 'ovr')
Models.append('LogisticRegression')
model2.fit(x_train, y_train)

y_pred_test = model2.predict(x_test)
y_pred_train = model2.predict(x_train)
acc1 = metrics.accuracy_score(y_test,y_pred_test)
acc = metrics.accuracy_score(y_train,y_pred_train)

print('Model: Linear Classifier')
print ("Accuracy for train set:"),
print (acc)
print ("Accuracy for test set:"),
print (acc1)
Accuracy_Trian.append(acc)
Accuracy_Test.append(acc1)

cm = confusion_matrix(y_test,y_pred_test)
plt.rcParams.update({'font.size': 26})

f, ax = plt.subplots(figsize =(10,10))
sns.heatmap(cm,cmap = "crest", annot = True,linewidths=0.5 ,linecolor ="green",fmt =".0f",ax=ax)
ax.set_title("The confusion matrix of Linear Classifier")
plt.show()